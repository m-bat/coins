
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Tue Mar 14 12:27:39 EST 2000
//----------------------------------------------------

package att.grappa;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10j generated parser.
  * @version Tue Mar 14 12:27:39 EST 2000
  */
/**
 * This class provides a parser for the <i>dot</i> graph representation format.
 * It is used in conjunction with JavaCup, a yacc-like parser generator
 * originally by:
 * <p>
 * <center>
 * <a href="http://www.cc.gatech.edu/gvu/people/Faculty/Scott.E.Hudson.html">Scott E. Hudson</a><br>
 * Graphics Visualization and Usability Center<br>
 * Georgia Institute of Technology<br>
 * </center>
 * </p>
 * and more recently modified and maintained by
 * <a href="http://www.cs.princeton.edu/~appel/modern/java/CUP/">
 * a number of people at Princeton University</a>.
 *
 * @version 1.1, 06 Jan 1998; Copyright 1996, 1997, 1998 by AT&T Corp.
 * @author  <a href="mailto:john@research.att.com">John Mocenigo</a>, <a href="http://www.research.att.com">Research @ AT&T Labs</a>
 */

public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\042\002\000\002\013" +
    "\005\000\002\013\003\000\002\013\002\000\002\014\005" +
    "\000\002\003\003\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\010\003\000\002\010\002\000\002" +
    "\015\005\000\002\016\003\000\002\016\002\000\002\017" +
    "\004\000\002\017\003\000\002\020\004\000\002\020\004" +
    "\000\002\024\005\000\002\025\003\000\002\025\003\000" +
    "\002\041\003\000\002\041\003\000\002\043\002\000\002" +
    "\005\006\000\002\005\002\000\002\027\003\000\002\027" +
    "\005\000\002\031\004\000\002\012\004\000\002\012\002" +
    "\000\002\021\005\000\002\021\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\004\000\002" +
    "\011\002\000\002\026\003\000\002\026\002\000\002\032" +
    "\006\000\002\034\003\000\002\034\002\000\002\035\003" +
    "\000\002\035\005\000\002\036\003\000\002\036\003\000" +
    "\002\037\005\000\002\040\004\000\002\033\003\000\002" +
    "\044\002\000\002\030\005\000\002\007\004\000\002\007" +
    "\003\000\002\007\002\000\002\022\003\000\002\022\002" +
    "\000\002\023\003\000\002\023\003\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\014\002\ufffd\003\005\004\ufffa\012\006\013" +
    "\ufffa\001\002\000\004\002\117\001\002\000\004\002\ufffe" +
    "\001\002\000\006\004\ufffb\013\ufffb\001\002\000\004\016" +
    "\000\001\002\000\006\004\013\013\011\001\002\000\006" +
    "\016\ufff8\025\ufff8\001\002\000\006\016\ufff6\025\015\001" +
    "\002\000\006\016\ufff9\025\ufff9\001\002\000\004\016\ufffc" +
    "\001\002\000\004\016\ufff7\001\002\000\004\016\017\001" +
    "\002\000\020\004\032\005\033\006\021\007\023\016\uffca" +
    "\017\ufff3\025\030\001\002\000\004\002\uffff\001\002\000" +
    "\006\020\uffdd\025\uffdd\001\002\000\022\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\014\043\016\uffc8\017\uffc8\025\uffc8\001" +
    "\002\000\006\016\uffcb\025\115\001\002\000\020\004\032" +
    "\005\033\006\021\007\023\016\uffca\017\ufff4\025\030\001" +
    "\002\000\022\004\uffcf\005\uffcf\006\uffcf\007\uffcf\014\uffcf" +
    "\016\uffcf\017\uffcf\025\uffcf\001\002\000\032\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\025\uffe6\001\002\000\004\017" +
    "\113\001\002\000\036\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\022\062\023\100\025\uffe2\001\002\000\030\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\105\011\103\014\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\025\uffe7\001\002\000\006\020\uffdf" +
    "\025\uffdf\001\002\000\006\020\uffde\025\uffde\001\002\000" +
    "\032\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\014\uffed\015\074\016\uffed\017\uffed\020\uffed\025\uffed\001" +
    "\002\000\022\004\uffe0\005\uffe0\006\uffe0\007\uffe0\014\uffe0" +
    "\016\uffe0\017\uffe0\025\uffe0\001\002\000\004\016\uffce\001" +
    "\002\000\020\004\ufff1\005\ufff1\006\ufff1\007\ufff1\016\ufff1" +
    "\017\ufff1\025\ufff1\001\002\000\006\020\uffdb\025\046\001" +
    "\002\000\022\004\uffc8\005\uffc8\006\uffc8\007\uffc8\014\043" +
    "\016\uffc8\017\uffc8\025\uffc8\001\002\000\030\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\014\uffec\016\uffec" +
    "\017\uffec\020\uffec\025\uffec\001\002\000\020\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\016\uffc9\017\uffc9\025\uffc9\001\002" +
    "\000\020\004\uffef\005\uffef\006\uffef\007\uffef\016\uffef\017" +
    "\uffef\025\uffef\001\002\000\004\020\uffd9\001\002\000\004" +
    "\022\047\001\002\000\004\020\uffdc\001\002\000\004\020" +
    "\052\001\002\000\024\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\014\uffe1\016\uffe1\017\uffe1\020\uffda\025\uffe1\001\002\000" +
    "\010\021\uffd6\024\055\025\057\001\002\000\014\014\uffd5" +
    "\015\uffd5\021\uffd5\024\uffd5\025\uffd5\001\002\000\014\014" +
    "\066\015\067\021\uffd7\024\uffc5\025\uffc5\001\002\000\004" +
    "\025\065\001\002\000\004\021\064\001\002\000\004\022" +
    "\062\001\002\000\014\014\uffd3\015\uffd3\021\uffd3\024\uffd3" +
    "\025\uffd3\001\002\000\014\014\uffd2\015\uffd2\021\uffd2\024" +
    "\uffd2\025\uffd2\001\002\000\004\025\063\001\002\000\030" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\024\uffd1\025\uffd1\001\002\000\024" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\014\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\025\uffd8\001\002\000\014\014\uffd0\015\uffd0" +
    "\021\uffd0\024\uffd0\025\uffd0\001\002\000\006\024\uffc7\025" +
    "\uffc7\001\002\000\006\024\uffc6\025\uffc6\001\002\000\006" +
    "\024\055\025\057\001\002\000\014\014\uffd4\015\uffd4\021" +
    "\uffd4\024\uffd4\025\uffd4\001\002\000\004\016\017\001\002" +
    "\000\030\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\025\uffcd\001\002" +
    "\000\004\025\075\001\002\000\034\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\023\100\025\uffe2\001\002\000\032\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\025\uffe5\001\002\000" +
    "\032\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\025\uffe4\001" +
    "\002\000\004\025\101\001\002\000\032\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\025\uffe3\001\002\000\010\007\uffe9" +
    "\016\uffe9\025\uffe9\001\002\000\010\007\uffea\016\uffea\025" +
    "\uffea\001\002\000\024\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\020\uffd9\025\uffd9\001\002\000" +
    "\010\007\uffeb\016\uffeb\025\uffeb\001\002\000\024\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\014\uffee\016\uffee\017\uffee\020" +
    "\052\025\uffee\001\002\000\024\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\014\uffda\016\uffda\017\uffda\020\uffda\025\uffda\001" +
    "\002\000\010\007\023\016\uffca\025\075\001\002\000\030" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\105\011\103\014" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\025\uffe7\001\002\000\024" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\025\uffe8\001\002\000\032\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\014\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\025\ufff5\001\002\000\020\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\016\ufff2\017\ufff2\025\ufff2\001" +
    "\002\000\004\016\uffcc\001\002\000\020\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\016\ufff0\017\ufff0\025\ufff0\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\010\003\007\013\003\014\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\015\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\004\010\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\017\001\001\000" +
    "\034\006\037\007\035\016\026\017\023\020\036\021\021" +
    "\024\040\025\030\027\033\030\041\031\025\033\034\037" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\115\001\001\000\002\001\001\000\030\006\037\007" +
    "\035\020\113\021\021\024\040\025\030\027\033\030\041" +
    "\031\025\033\034\037\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\076\001\001" +
    "\000\006\005\103\041\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\071\001\001\000\002\001\001\000\004\011\044\001" +
    "\001\000\004\022\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\047\032\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\055\035\053\036\052\037" +
    "\057\040\060\001\001\000\002\001\001\000\004\023\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\070\037\057" +
    "\040\060\001\001\000\002\001\001\000\004\015\072\001" +
    "\001\000\002\001\001\000\004\031\075\001\001\000\004" +
    "\012\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\107\001\001" +
    "\000\002\001\001\000\006\026\105\032\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\035\025\110\027\033\030\041\031\025\001\001\000" +
    "\006\005\111\041\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  lexer.init();
  action_obj.graph = theGraph;
  //action_obj.parser = this;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(debugLevel); 
    }


  private Graph theGraph = null;
  private Reader inReader;
  private PrintWriter errWriter;
  private Lexer lexer;
  private int debugLevel = 0;

  /**
   * Create an instance of <code>Parser</code> with input, error output and
   * a supplied <code>Graph</code> object.  The graph object is cleared (reset) before
   * new graph components are added to it by this parsing operation.
   *
   * @param inputReader input <code>Reader</code> object
   * @param errorWriter error output <code>Writer</code> object (or null to suppress error output)
   * @param graph <code>Graph</code> object for storing parsed graph information (or null to create a new object)
   */
  public Parser (Reader inputReader, PrintWriter errorWriter, Graph graph) {
    super ();
    inReader = inputReader;
    errWriter = errorWriter;
    theGraph = graph;
    lexer = new Lexer (inputReader, errorWriter);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputReader,errorWriter,null)</code>.
   *
   * @param inputReader input <code>Reader</code> object
   * @param errorWriter error output <code>Writer</code> object (or null to suppress error output)
   */
  public Parser (Reader inputReader, PrintWriter errorWriter) {
    this(inputReader,errorWriter,null);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputReader,null,null)</code>.
   *
   * @param inputReader input <code>Reader</code> object
   */
  public Parser (Reader inputReader) {
    this(inputReader,(PrintWriter)null,null);
  }

  /**
   * Create an instance of <code>Parser</code> with input, error output and
   * a supplied <code>Graph</code> object.  The input stream is converted to
   * a <code>Reader</code> and the error stream is converted to a <code>Writer</code>.
   *
   * @param inputStream input <code>InputStream</code> object
   * @param errorStream error output <code>OutputStream</code> object (or null to suppress error output)
   * @param graph <code>Graph</code> object for storing parsed graph information (or null to create a new object)
   */
  public Parser (InputStream inputStream, OutputStream errorStream, Graph graph) {
    this(new InputStreamReader(inputStream),new PrintWriter(errorStream,true),graph);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputStream,errorStream,null)</code>.
   *
   * @param inputStream input <code>InputStream</code> object
   * @param errorStream error output <code>OutputStream</code> object
   */
  public Parser (InputStream inputStream, OutputStream errorStream) {
    this(new InputStreamReader(inputStream),new PrintWriter(errorStream,true),null);
  }

  /**
   * A convenience constructor equivalent to <code>Parser(inputStream,null,null)</code>.
   *
   * @param inputStream input <code>InputStream</code> object
   */
  public Parser (InputStream inputStream) {
    this(new InputStreamReader(inputStream),(PrintWriter)null,null);
  }

  /**
   * Get the <code>Lexer</code> object associated with this parser.
   *
   * @return the associated lexical analyzer.
   */
  public Lexer getLexer() {
    return lexer;
  }

  /**
   * Get the error writer, if any, for this parser.
   *
   * @return the error writer for this parser.
   */
  public PrintWriter getErrorWriter() {
    return(errWriter);
  }

  /**
   * Get the debug level for this parser.
   * The debug level is set to a non-zero value by calling <code>debug_parse</code>.
   *
   * @return the debug level of this parser.
   * @see Parser#debug_parse(int)
   */
  public int getDebugLevel() {
    return(debugLevel);
  }

  /**
   * Report a fatal error.
   * Calling this method will throw a <code>GraphParserException</code>.
   *
   * @param message the error message to send to the error stream and include in the thrown exception
   * @param info not used
   *
   * @exception GraphParserException whenver this method is called
   */
  public void report_error(String message, Object info) throws GraphParserException {
    String loc = getLexer().getLocation();
    if(errWriter != null) {
      errWriter.println("ERROR: Parser" + loc + ": " + message);
    }
    throw new GraphParserException("at " + loc + ": " + message);
  }

  /**
   * Report a non-fatal error.
   *
   * @param message the warning message to send to the error stream, if the stream non-null.
   * @param info not used
   */
  public void report_warning(String message, Object info) {
    String loc = getLexer().getLocation();
    if(errWriter != null) {
      errWriter.println("WARNING: Parser" + loc + ": " + message);
    }
  }

  /**
   * Write a debugging message to the error stream.
   * The debug level of the message is 5.
   *
   * @param message the debug message to send to the error stream, if the stream non-null.
   * @see Parser#debug_message(int,String)
   */
  public void debug_message(String message) {
    debug_message(5, message);
  }

  /**
   * Write a debugging message to the error stream.
   * A message is written only if the error stream is not null and the
   * debug level of the message is greater than or equal to the debugging
   * level of the parser.
   *
   * @param level the level of the message
   * @param message the debug message to send to the error stream, if the stream non-null.
   * @see Parser#getDebugLevel()
   */
  public void debug_message(int level, String message) {
    if(debugLevel < level) {
      return;
    }
    String loc = getLexer().getLocation();
    if(errWriter != null) {
      errWriter.println("DEBUG: Parser" + loc + ": " + message);
    }
  }

  /**
   * Invokes the parser in debug mode.
   * The lowering the debug level reduces the amount of debugging output.
   * A level of 0 inhibits all debugging messages, generally a level of 10
   * will let all messages get through.
   *
   * @param debug the debug level to use for filtering debug messages based on priority. 
   * @exception Exception if <code>parse()</code> does
   */
  public Symbol debug_parse(int debug) throws java.lang.Exception {
    if(debug == 0) {
      return parse();
    }

    debugLevel = debug;

    /* the current action code */
    int act;

    /* the Symbol/stack element returned by a reduce */
    Symbol lhs_sym = null;

    /* information about production being reduced with */
    short handle_size, lhs_sym_num;

    /* set up direct reference to tables to drive the parser */
    production_tab = production_table();
    action_tab     = action_table();
    reduce_tab     = reduce_table();

    debug_message(5, "# Initializing parser");

    /* initialize the action encapsulation object */
    init_actions();

    /* do user initialization */
    user_init();

    /* the current Symbol */
    cur_token = scan(); 

    debug_message(5, "# Current Symbol is #" + cur_token.sym);

    /* push dummy Symbol with start state to get us underway */
    stack.push(new Symbol(0, start_state()));
    tos = 0;

    /* continue until we are told to stop */
    for (_done_parsing = false; !_done_parsing; )
      {
	/* current state is always on the top of the stack */

	/* look up action out of the current state with the current input */
	act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);

	/* decode the action -- > 0 encodes shift */
	if (act > 0)
	  {
	    /* shift to the encoded state by pushing it on the stack */
	    cur_token.parse_state = act-1;
	    debug_shift(cur_token);
	    stack.push(cur_token);
	    tos++;

	    /* advance to the next Symbol */
	    cur_token = scan();
	    debug_message(5, "# Current token is #" + cur_token.sym);
	  }
	/* if its less than zero, then it encodes a reduce action */
	else if (act < 0)
	  {
	    /* perform the action for the reduce */
	    lhs_sym = do_action((-act)-1, this, stack, tos);

	    /* look up information about the production */
	    lhs_sym_num = production_tab[(-act)-1][0];
	    handle_size = production_tab[(-act)-1][1];

	    debug_reduce((-act)-1, lhs_sym_num, handle_size);

	    /* pop the handle off the stack */
	    for (int i = 0; i < handle_size; i++)
	      {
		stack.pop();
		tos--;
	      }
	      
	    /* look up the state to go to from the one popped back to */
	    act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);

	    /* shift to that state */
	    lhs_sym.parse_state = act;
	    stack.push(lhs_sym);
	    tos++;

	    debug_message(5, "# Goto state #" + act);
	  }
	/* finally if the entry is zero, we have an error */
	else if (act == 0)
	  {
	    /* call user syntax error reporting routine */
	    syntax_error(cur_token);

	    /* try to error recover */
	    if (!error_recovery(true))
	      {
		/* if that fails give up with a fatal syntax error */
		unrecovered_syntax_error(cur_token);

		/* just in case that wasn't fatal enough, end parse */
		done_parsing();
	      } else {
		lhs_sym = (Symbol)stack.peek();
	      }
	  }
      }
    return lhs_sym;
  }

  CUP$Parser$actions getActionObject () {
    return action_obj;
  }

  /**
   * Get the graph resulting from the parsing operations.
   *
   * @return the graph generated from the input.
   */
  public Graph getGraph () {
    return action_obj.graph;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  // a list of variables used in action code during grammar translation
  //Parser parser = null;
  Subgraph rootSubgraph;
  Subgraph lastSubgraph;
  Graph    graph;
  Subgraph thisGraph;
  Node     thisNode;
  Edge     thisEdge;
  Node     fromNode;
  Node     toNode;
  String      portName = null;
  String      toPortName;
  String      fromPortName;
  int         thisAttrType;
  int         thisElemType;
  boolean directed = true;
  String      graphType;
  private int anon_id = 0;
  Vector attrs = new Vector(8,4);
  Vector nodes = new Vector(8,4);
  Vector edges = new Vector(8,4);

  void appendAttr(String name, String value) {
    attrs.addElement(new Attribute(name,value));
  }

  void noMacros() {
    parser.report_error("attribute macros are not supported yet", null);
  }

  void attrStmt(int kind, String macroName) {
    if(macroName != null) {
      noMacros();
      return;
    }
    if(attrs.size() == 0) return;
    Attribute attr = null;
    for(int i = 0; i < attrs.size(); i++) {
      if((attr = (Attribute)(attrs.elementAt(i))).getValue() == null) {
	noMacros();
	continue;
      } else {
	switch(kind) {
	case Grappa.NODE:
	  thisGraph.setNodeAttribute(attr);
	  break;
	case Grappa.EDGE:
	  thisGraph.setEdgeAttribute(attr);
	  break;
	case Grappa.SUBGRAPH:
	  thisGraph.setAttribute(attr);
	  break;
	}
      }
    }
    attrs.removeAllElements();
  }

  void startGraph(String name, boolean type, boolean strict) {
    if(graph == null) {
      graph = new Graph(name, type, strict);
    } else {
      graph.reset(name, type, strict);
    }
    directed = type;
    rootSubgraph = (Subgraph)graph;
    parser.debug_message(1, "Creating top level graph (" + name + ")");
    anon_id = 0;
  }

  void openGraph() {
    thisGraph = rootSubgraph;
    thisElemType = Grappa.SUBGRAPH;
    parser.debug_message(1, "thisGraph(" + thisGraph.getName() + ")");
  }

  void closeGraph() {
    int level = 1;

    if(parser.getErrorWriter() != null && parser.getDebugLevel() >= level) {
               
      parser.debug_message(level, "parsed graph follows:");
      rootSubgraph.printSubgraph(parser.getErrorWriter());
    }
  }

  void openSubg(String name) {
    thisGraph = new Subgraph(thisGraph, name);
    parser.debug_message(1, "thisGraph(" + thisGraph.getName() + ")");
    thisElemType = Grappa.SUBGRAPH;
  }

  String anonStr() {
    return Grappa.ANONYMOUS_PREFIX + anon_id++;
  }

  void closeSubg() {
    lastSubgraph = thisGraph;
    // getSubgraph() gets the parent subgraph
    thisGraph = thisGraph.getSubgraph();
    if(thisGraph == null) {
      parser.report_error ("parser attempted to go above root Subgraph", null);
      thisGraph = rootSubgraph;
    }
    parser.debug_message(1, "Created subgraph in subgraph (" + thisGraph.getName() + ")...");
    parser.debug_message(1, "thisGraph(" + thisGraph.getName() + ")");
  }

  void appendNode(String name, String port) {
    if((thisNode = rootSubgraph.findNodeByName(name)) == null) {
      parser.debug_message(1, "Creating node in subgraph (" + thisGraph.getName() + ")...");
      thisNode = new Node(thisGraph, name);
    } else {
      parser.debug_message(1, "Node already in subgraph (" + thisNode.getSubgraph().getName() + ")...");
    }
    Object[] pair = new Object[2];
    pair[0] = thisNode;
    pair[1] = port;
    nodes.addElement(pair);
    parser.debug_message(1, "thisNode(" + thisNode.getName() + ")");
    thisElemType = Grappa.NODE;
  }

  void nodeWrap() {
    Object[] pair = null;
    if(nodes.size() > 0 && attrs.size() > 0) {
      for(int i = 0; i < nodes.size(); i++) {
	pair = (Object[])(nodes.elementAt(i));
	applyAttrs((Element)pair[0],null);
      }
    }
    attrs.removeAllElements();
    nodes.removeAllElements();
  }

  void bufferEdges() {
    Object[] pair = new Object[2];
    if(nodes.size() > 0) {
      pair[0] = nodes;
      nodes = new Vector(8,4);
      pair[1] = new Boolean(true);
    } else if(lastSubgraph != null) {
      pair[0] = lastSubgraph;
      lastSubgraph = null;
      pair[1] = new Boolean(false);
    } else {
      parser.report_error ("EDGE_OP without clear antecedent nodelist or subgraph", null);
      return;
    }
    edges.addElement(pair);
  }

  void edgeWrap() {
    bufferEdges();
    Attribute key = null;
    Attribute attr = null;
    int skip = -1;
    for(int i = 0; i < attrs.size(); i++) {
      attr = (Attribute)(attrs.elementAt(i));
      if(attr.getName().equals("key")) {
	key = attr;
	break;
      }
    }
    Object[] tailPair = (Object[])(edges.elementAt(0));
    Object[] headPair = null;
    for(int i = 1; i < edges.size(); i++) {
      headPair = (Object[])(edges.elementAt(i));
      if(((Boolean)(tailPair[1])).booleanValue()) { // true if node list
	Vector list = (Vector)(tailPair[0]);
	Object[] nodePair = null;
	for(int j = 0; j < list.size(); j++) {
	  nodePair = (Object[])(list.elementAt(j));
	  edgeRHS((Node)(nodePair[0]),(String)(nodePair[1]),headPair,key);
	}
	list.removeAllElements();
      } else {
	Subgraph subg = (Subgraph)(tailPair[0]);
	Enumeration enum = subg.elements(Grappa.NODE);
	while(enum.hasMoreElements()) {
	  edgeRHS((Node)(enum.nextElement()),null,headPair,key);
	}
      }
      tailPair = headPair;
    }
    edges.removeAllElements();
    attrs.removeAllElements();
  }

  void edgeRHS(Node tail, String tailPort, Object[] headPair, Attribute keyAttr) {
    String key = (keyAttr == null) ? null : keyAttr.getValue();
    if(((Boolean)(headPair[1])).booleanValue()) { // true if node list
      Vector list = (Vector)(headPair[0]);
      Object[] nodePair = null;
      for(int j = 0; j < list.size(); j++) {
	nodePair = (Object[])(list.elementAt(j));
	thisEdge = new Edge(thisGraph, tail, tailPort, (Node)(nodePair[0]), (String)(nodePair[1]), key);
	parser.debug_message(1, "Creating edge in subgraph (" + thisGraph.getName() + ")...");
	parser.debug_message(1, "thisEdge(" + thisEdge.getName() + ")");
	applyAttrs((Element)thisEdge,keyAttr);
      }
    } else {
      Subgraph subg = (Subgraph)(headPair[0]);
      Enumeration enum = subg.elements(Grappa.NODE);
      while(enum.hasMoreElements()) {
	thisEdge = new Edge(thisGraph, tail, tailPort, (Node)(enum.nextElement()), null, key);
	parser.debug_message(1, "Creating edge in subgraph (" + thisGraph.getName() + ")...");
	parser.debug_message(1, "thisEdge(" + thisEdge.getName() + ")");
	applyAttrs((Element)thisEdge,keyAttr);
      }
    }
  }

  void applyAttrs(Element elem, Attribute skip) {
    Attribute attr = null;
    for(int i = 0; i < attrs.size(); i++) {
      attr = (Attribute)attrs.elementAt(i);
      if(attr == skip) continue;
      elem.setAttribute(attr);
    }
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optSeparator ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*optSeparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // optSeparator ::= COMMA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*optSeparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // optSeparator ::= SEMI 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*optSeparator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // optSemi ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*optSemi*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optSemi ::= SEMI 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*optSemi*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optSubgHdr ::= 
            {
              String RESULT = null;
		
                 RESULT = anonStr();
               
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*optSubgHdr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optSubgHdr ::= SUBGRAPH 
            {
              String RESULT = null;
		
                 RESULT = anonStr();
               
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*optSubgHdr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optSubgHdr ::= SUBGRAPH ATOM 
            {
              String RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                 RESULT = val;
               
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*optSubgHdr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // subgraph ::= optSubgHdr NT$2 body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
               closeSubg();
             
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*subgraph*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

               openSubg(val);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*NT$2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // graphAttrDefs ::= attrAssignment 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*graphAttrDefs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // attrMacro ::= ATSIGN ATOM 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                appendAttr(name,null);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*attrMacro*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // attrAssignment ::= ATOM EQUAL ATOM 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                     appendAttr(name,value);
                   
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*attrAssignment*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // attrItem ::= attrMacro 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*attrItem*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // attrItem ::= attrAssignment 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*attrItem*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // attrDefs ::= attrDefs optSeparator attrItem 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(27/*attrDefs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // attrDefs ::= attrItem 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(27/*attrDefs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // optAttrDefs ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*optAttrDefs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optAttrDefs ::= attrDefs 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*optAttrDefs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // attrList ::= optAttr LBR optAttrDefs RBR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*attrList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optAttr ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*optAttr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // optAttr ::= attrList 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*optAttr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optMacroName ::= 
            {
              String RESULT = null;
		
                   RESULT = null;
                 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*optMacroName*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // optMacroName ::= ATOM EQUAL 
            {
              String RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   RESULT = val;
                 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*optMacroName*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // attrType ::= EDGE 
            {
              Integer RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
               RESULT = new Integer(Grappa.EDGE);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*attrType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // attrType ::= NODE 
            {
              Integer RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
               RESULT = new Integer(Grappa.NODE);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*attrType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // attrType ::= GRAPH 
            {
              Integer RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
               RESULT = new Integer(Grappa.SUBGRAPH);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*attrType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // attrStmt ::= graphAttrDefs 
            {
              Object RESULT = null;
		
               attrStmt(Grappa.SUBGRAPH,null);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*attrStmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attrStmt ::= attrType optMacroName attrList 
            {
              Object RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
               attrStmt(type.intValue(),name);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*attrStmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optPort ::= 
            {
              String RESULT = null;
		
              RESULT = null;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*optPort*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optPort ::= COLON ATOM 
            {
              String RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
              RESULT = val;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*optPort*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // node ::= ATOM optPort 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int portleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String port = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
           appendNode(name,port);
         
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*node*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nodeList ::= nodeList COMMA node 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(21/*nodeList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nodeList ::= node 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(21/*nodeList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rCompound ::= 
            {
              Boolean RESULT = null;
		
                RESULT = new Boolean(false);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*rCompound*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rCompound ::= edge_op NT$1 simple rCompound 
            {
              Boolean RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value != null )
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                RESULT = new Boolean(true);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*rCompound*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              Object RESULT = null;

                bufferEdges();
              
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*NT$1*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // edge_op ::= ND_EDGE_OP 
            {
              Object RESULT = null;
		
	      if(directed) {
		parser.report_error ("attempt to create a non-directed edge in a directed graph",null);
	      }
	    
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*edge_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // edge_op ::= D_EDGE_OP 
            {
              Object RESULT = null;
		
	      if(!directed) {
		parser.report_error ("attempt to create a directed edge in a non-directed graph",null);
	      }
	    
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*edge_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple ::= subgraph 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*simple*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simple ::= nodeList 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*simple*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compound ::= simple rCompound optAttr 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
               if (val.booleanValue()) edgeWrap();
               else nodeWrap();
             
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*compound*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= compound optSemi 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= attrStmt optSemi 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmtList ::= stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(13/*stmtList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmtList ::= stmtList stmt 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(13/*stmtList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optStmtList ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*optStmtList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optStmtList ::= stmtList 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*optStmtList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= LCUR optStmtList RCUR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(11/*body*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optGraphName ::= 
            {
              String RESULT = null;
		
                   RESULT = anonStr();
                 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*optGraphName*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optGraphName ::= ATOM 
            {
              String RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                   RESULT = val;
                 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*optGraphName*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graphType ::= DIGRAPH 
            {
              Boolean RESULT = null;
		
                RESULT = new Boolean(true);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*graphType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graphType ::= GRAPH 
            {
              Boolean RESULT = null;
		
                RESULT = new Boolean(false);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*graphType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optStrict ::= 
            {
              Boolean RESULT = null;
		
                RESULT = new Boolean(false);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*optStrict*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optStrict ::= STRICT 
            {
              Boolean RESULT = null;
		
                RESULT = new Boolean(true);
              
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*optStrict*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // hdr ::= optStrict graphType optGraphName 
            {
              Object RESULT = null;
		int strictleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strictright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean strict = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
          startGraph(name,type.booleanValue(),strict.booleanValue());
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*hdr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // graph ::= 
            {
              Object RESULT = null;
		
             graph = new Graph("empty");
             parser.report_warning ("The graph to parse is empty.", null);
          
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*graph*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // graph ::= error 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
             parser.report_error ("An error was encountered while graph parsing (" + val.toString() + ").", null);
          
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*graph*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // graph ::= hdr NT$0 body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    closeGraph();
          
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*graph*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT = null;

	    openGraph();
          
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*NT$0*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= graph EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

