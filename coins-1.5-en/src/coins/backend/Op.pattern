/* ----------------------------------------------------------
%   Copyright (C) 2004 The Coins Project Group               
%       (Read COPYING for detailed information.)             
----------------------------------------------------------- */
// DO NOT EDIT THIS FILE DIRECTLY; Edit Op.pattern instead.
package coins.backend;

import java.util.HashMap;
import java.util.Map;

/** Operator mnemonic encoder/decoder.
 *   operator mnemonic are represented in int, not an instance of the class. */
public class Op {
==1
=!  public static final int %x = %n;
#include "Op.names"
MAX
=
  static String[] opNames = {
=!    "%x",
dummy
#include "Op.names"
=
  };

  static boolean[] typed = {
=!	%t,
false,
#include "Op.names"
=
  };

  private static final Map table;

  // Inhibit invokation of constructor.
  private Op() {}

  static {
    // initialize name table
    table = new HashMap();
    for (int i = 0; i < Op.MAX; i++)
      table.put(opNames[i], new Integer(i));
  }

  /** Convert operator mnemonic to integer code */
  public static int toCode(String name) {
    Integer code = (Integer)table.get(name);
    if (code == null)
      return -1;
      //  throw new Error("Unknown opcode: " + name);
    return code.intValue();
  }

  /** Convert operator code to mnemonic */
  public static String toName(int code) {
    return opNames[code];
  }

  /** Return true if the operator is typed. */
  public static boolean isTyped(int code) {
    return typed[code];
  }
}
